NUOVO!! (FEBBRAIO)
- controlla se usate e init bene goal_squares
- uso threat/line tier (sopr. defensive visit)
	- eventualmente crea nuovo ranking (rispettando tesi)
- ( (fatto!) IMPORTANTE - ERRORE ) serve hash table per non creare infinite combinazioni (problema delle combinazioni che hanno 2 padri)
-	(DOVE ERO ARRIVATO) fatto transposition table (eventualmente da testare); pare che non si blocchi niente;
	problema: non riconosce minacce (neanche con 5)

-------------------

ERRORI:
	- pnsearchADeleteD :
		- errore out of tempo con 3g mem (su macchine lab)
		- selected illegal move (dopo qualche mossa) (player 1)
		- -1 out of bounds for 49, dopo il primo print prima del visit (dopo qualche mossa) (player 1,2)
	- pnsearchAUpdate:
		- (player2) java.util.concurrent.ExecutionException: java.lang.NullPointerException: Cannot invoke "player.pnsearch.structures.Nodes$Node_t.getPosition()" because "<local2>" is null
		- [come player1 sembra non dare errori]
	- updateD:
		- (p2,>1move) java.util.concurrent.ExecutionException: java.lang.NullPointerException: Cannot invoke "java.util.Collection.iterator()" because "this.children" is null
		- (//) java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 49


LINK (da leggere):
https://ieee-cog.org/2019/papers/paper_115.pdf (paper from wikipedia)
https://en.wikipedia.org/wiki/M,n,k-game
http://fragrieu.free.fr/SearchingForSolutions.pdf (Victor Allis) (tesi 200 pagine pnsearch, dbsearch)
Transpositions
http://ggp.stanford.edu/readings/symmetry.pdf
letti:
https://www.chessprogramming.org/Transposition_Table
https://www.chessprogramming.org/Zobrist_Hashing
https://www.chessprogramming.org/Enhanced_Transposition_Cutoff

MINIMAX:
	- cambiare Board con nostra struttura (perché modifica le sue MC e FC con markCell() in modo non efficiente; in particolare non sono efficienti FC.toArray(lineare), e FC.remove (logaritmico))


-	se avversario ha mossa vincente (tipo se ha due mosse vincenti e quindi non puoi bloccargliele entrambe):
	può convenire ignorarlo e cercare di fare un tuo allineamento, sperando che lui sbagli (magari è implementato in modo che se tu stai per vincere non ti fa vincere);
	oppure bloccargliene una (sperando che si perda l'altra)
-	se una mossa è obbligata, si possono memorizzare due mosse insieme (dei due giocatori);
	inoltre, alcune mosse magari non ha senso analizzarle o memorizzarle (se portano a stati finiti);
	infine, a sto punto, si può non inizializzare subito la hash table di trasposizione, ma farlo per le configurazioni volute di volta in volta
-	DAG transposition

-	transposition table: salvare solo parte di hash key per ogni entry ? (eventualmente (chess-wikipedia) parte non usata come indice, o anche meno)

PNSEARCH:
	-	per avere effettivo numero di nodi alive (tot), si dovrebbe memorizzare nel nodo i nodi figli (ricorsivamente), altrimenti non si sa quanti se ne tolgono tagliando
		l'albero tra una mossa e l'altra
	-	PnSearchStore.selectMostProving : serve l'else? forse non ci si arriva mai
DBSEARCH:
	-	enhancement addcombination: crea solo nodi dove applicabile almeno un operatore
DBSEARCH2:
	-	board: remove alignments improved for line / more cells at a time
	-	NOTE: findAllCombinationNodes : doesn't check isDependencyNode(): also needs combination between combination nodes (paper says, combinations of up to k nodes, so in this way i ensure those combinations are created)

	TODO:
		-	quindi in caso di win devo ritornare il nodo finale, con la board vincente
		-	heuristic: (non per global defense) se opponent ha threat category j, devo cercare solo threat category i

		-	(done) : dbBoard.getCombined / checkCombinedThreats -> (to test)
		
	DONE(?):
		-	dividi operator attacker/defender

		-	parametro nel find alignments per max category
		-	check won
		-	converti dbboard che usa le applied threat
		-	lines in combination stage
		
		-	check isLastDependency in find all comb nodes?? which nodes are dependency/comb/root??
		-	correggi combination con la versione che parte da root?
		-	combination tra piu nodi?

		-	goal squares: inserisci come parametro; fai che se una viene occupata, ritorna win
		-	per trovare le goal square, quelle occupate in una threat sequence, basta fare la "differenza" tra le board
		-	global defense
		-	only find sequences for current attacker

		-	heuristic: conta win; fai max 10 (per attacker)





PROPRIETÀ:
-	m,n,k WIN	⇒ m> || n> || k< : WIN
-	m,n,k DRAW	⇒ m< || n< || k> : DRAW
-	k>=9: DRAW (tecnica pair)
-	k>=3 && m<k || n<k : DRAW (tecnica pair, perpenidicolari a dimensione minore

CASI:
-	k = 1 and k = 2 are trivial wins, except for (1,1,2) and (2,1,2)
-	(m,n,3) DRAW if m < 3 or n < 3.
-	3 3 3 DRAW
-	(m,n,3) WIN if m>3 || n>3
-	4 3 3 WIN
-	4 4 3 WIN
-	4 4 4 DRAW
-	5 4 4 DRAW
-	(m,n,4) DRAW for m ≤ 5 and n ≤ 5
-	5 5 4 DRAW
-	5 5 5 DRAW
-	6 4 4 DRAW
-	6 5 4 WIN
-	(m,n,4) is a win for m ≥ 6 and n ≥ 5 or m ≥ 5 and n ≥ 6.
-	6 6 4 WIN
-	6 6 5 DRAW
-	6 6 6 DRAW
-	7 4 4 DRAW
-	7 5 4 WIN
-	7 6 4 WIN
-	7 7 4 WIN
-	7 5 5 DRAW
-	7 6 5 DRAW
-	(m,n,5) DRAW for m ≤ 8 and n ≤ 8
-	7 7 5 DRAW (Computer search by Wei-Yuan Hsu and Chu-Ling Ko)
-	(7,7,6) DRAW (pairings)
-	7 7 7 ?
-	(m,4,4) DRAW for m ≤ 8
-	8 8 4 WIN
-	8 8 5 DRAW (Computer search by Wei-Yuan Hsu and Chu-Ling Ko)
-	(m,4,4) for 9 ≤ m ≤ 29 : ?
-	(9,6,6) DRAW (pairings)
-	10 10 5 ?
-	(15,15,5) WIN, (Computer search by L. Victor Allis) (even with one of the restrictive rules of Gomoku)
-	(m,4,4) WIN for m ≥ 30 (Lustenberger, 1967)
-	50 50 10 ?
-	70 70 10 ?


RISULTATI:
(format: {k:m,n, ...})
//m,n o n,m : indifferente
min_win = {3:3,4, 4:6,5}
-	k ∈ [3,4], m>=k, n>=4	: (WIN)
							FIRST	: conisidera min_win[k] (es. Nord-Ovest)


STRATEGIE:
-	5,6,4:
	______
	______
	__x___
	______
	______
	.
	______
	______
	_ox___
	______
	______
	.
	______
	_x____
	_ox___
	______
	______
	.
	______
	_x____
	_ox___
	___o__
	______
	.
	______
	_xx___
	_ox___
	___o__
	______
	.
	______
	_o____
	__x___
	______
	______
	.
	______
	_ox___
	__x___
	______
	______
	.
	______
	_ox___
	__x___
	__o___
	______
	.
	______
	_oxx__
	__x___
	__o___
	______
	
-	3,4,3
	____
	_x__
	____
	.
	__o_
	_x__
	____
	.
	__o_
	_xx_
	____
	.
	____
	_xo_
	____
	.
	____
	_xo_
	__x_
	.
	o___
	_xo_
	__x_
	.
	o___
	_xo_
	_xx_
	.

-	k>=9 (pairs)
	--/\--/\
	\/||\/||
	--||--||
	 \--/\--
	||\/||\/
	||--||--
